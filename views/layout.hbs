<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Babylon Template</title>
    <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src="https://cdn.babylonjs.com/materialsLibrary/babylon.skyMaterial.min.js"></script>
    <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>
    <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
    <script src="javascripts/setCamera.js"></script>
    <script src="javascripts/createTree.js"></script>
    <script src="javascripts/setSkyAnimation.js"></script>
    <script src="javascripts/setGround.js"></script>
    <script src="javascripts/createAttachedTooltipLine.js"></script>
    <script src="javascripts/createButton.js"></script>
    <script src="javascripts/createCircleTarget.js"></script>
    <script src="javascripts/createAnimationGroup.js"></script>
    <script src="javascripts/createBaseTooltipAnimation.js"></script>
    <script src="javascripts/createBaseText.js"></script>
    <script src="javascripts/createBaseTextBox.js"></script>
    <script src="javascripts/createLineAnimation.js"></script>
    <script src="javascripts/createLabelAnimation.js"></script>
    <script src="javascripts/createAttachedText.js"></script>
    <script src="javascripts/createBaseTooltip.js"></script>
    <script src="javascripts/createAttachedTooltip.js"></script>
    <script src="consts.js"></script>

  </head>

  <body>
      <canvas id="renderCanvas" touch-action="none"></canvas>
      <script>
        var createScene = function() {
          // TODO: Start here for initialization

          // Initialize Scene
          const scene = new BABYLON.Scene(engine);

          const camera = setCamera();

          // Lighting
          const light = new BABYLON.HemisphericLight(
            "light",
            new BABYLON.Vector3(0, 1, 0)
          );
          light.intensity = 1;

          setGround();

           var skyboxMaterial = new BABYLON.SkyMaterial("skyMaterial");
          skyboxMaterial.backFaceCulling = false;

          var skybox = BABYLON.Mesh.CreateBox("skyBox", 1000.0);
          skybox.material = skyboxMaterial;

          const skyAnimations = {
            day: setSkyAnimation("Day", "material.inclination", skyboxMaterial.inclination, 0),
            night: setSkyAnimation("Night", "material.inclination", skyboxMaterial.inclination, -0.5)
          };

          //Set materials
          const materials = {};

          materials.defaultBark = new BABYLON.StandardMaterial("defaultBark", scene);
          materials.defaultBark.emissiveTexture = new BABYLON.Texture("https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Bark_texture_wood.jpg/800px-Bark_texture_wood.jpg", scene);
          materials.defaultBark.diffuseTexture = new BABYLON.Texture("https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Bark_texture_wood.jpg/800px-Bark_texture_wood.jpg", scene);
          materials.defaultBark.bumpTexture = new BABYLON.Texture("assets/tree-bark-bump-texture.jpeg", scene);
          materials.defaultBark.diffuseTexture.uScale = 2.0;//Repeat 5 times on the Vertical Axes
          materials.defaultBark.diffuseTexture.vScale = 2.0;//Repeat 5 times on the Horizontal Axes

          const bark = materials.defaultBark;

          materials.defaultLeaf = new BABYLON.StandardMaterial(
              "defaultLeafMaterial",
              scene
            );
          materials.defaultLeaf.diffuseColor = BABYLON.Color3.FromHexString("#ACCD3E");

          materials.overwateredLeaf = new BABYLON.StandardMaterial(
              "overwateredLeafMaterial",
              scene
          );
          materials.overwateredLeaf.diffuseColor = BABYLON.Color3.FromHexString("#618D23")

          materials.dryLeaf = new BABYLON.StandardMaterial(
              "dryLeafMaterial",
              scene
          );

          materials.dryLeaf.diffuseColor = BABYLON.Color3.FromHexString("#B69063")

          materials.cherryBlossom = new BABYLON.StandardMaterial(
              "cherryBlossomMaterial",
              scene
          );

          materials.recoveredLeaf = new BABYLON.StandardMaterial(
            "leafMaterial",
            scene
          );
          materials.recoveredLeaf.diffuseColor = BABYLON.Color3.FromHexString("#D5DB7D")

          materials.cherryBlossom.diffuseColor = BABYLON.Color3.FromHexString("#E84396")
          materials.cherryBlossom.specularColor = BABYLON.Color3.FromHexString("#E84396")
          materials.cherryBlossom.emissiveColor = BABYLON.Color3.FromHexString("#FF9DCE")
          materials.cherryBlossom.ambientColor = BABYLON.Color3.FromHexString("#FF9DCE")

          //Set trees data
          let trees = [];

          const baseTooltipOffset = {
            baseTooltipOffsetX: -350,
            baseTooltipOffsetY: -125
          };

          const treesData = [{
            data: TREES_NUMBER_VALUES[0],
            baseTooltipOffsetX: 0,
            baseTooltipOffsetY: 100,
            baseTooltipHeight: "75px",
            branches: [],
            leafMaterial: materials.defaultLeaf,
            tooltipText: TOOLTIP_TEXT_BASE.TREE_0,
            buttonData: {
              label: 'Bud',
              verticalOffset: -20
            },
            skyAnimation: skyAnimations.day
          }, {
            ...baseTooltipOffset,
            data: TREES_NUMBER_VALUES[1],
            baseTooltipHeight: "75px",
            branches: [
              {
                offsetX: 0,
                offsetY: -200,
                text: TOOLTIP_TEXT_BRANCHES.BUILD,
                width: "100px"
              },
              {
                offsetX: 40,
                offsetY: -150,
                text: TOOLTIP_TEXT_BRANCHES.DOCS,
                width: "100px"
              },
              {
                offsetX: -40,
                offsetY: -150,
                text: TOOLTIP_TEXT_BRANCHES.INSIGHT,
                width: "100px"
              }
            ],
            leafMaterial: materials.defaultLeaf,
            tooltipText: TOOLTIP_TEXT_BASE.TREE_1,
            buttonData: {
              label: 'Young',
              verticalOffset: -70
            },
            skyAnimation: skyAnimations.night
          }, {
            ...baseTooltipOffset,
            data: TREES_NUMBER_VALUES[2],
            baseTooltipHeight: "75px",
            branches: [
              {
                offsetX: 0,
                offsetY: -270,
                text: TOOLTIP_TEXT_BRANCHES.TAKEOFF,
                width: "100px"
              },
              {
                offsetX: 100,
                offsetY: -200,
                text: TOOLTIP_TEXT_BRANCHES.DESIGN_COLLABORATION,
                width: "200px"
              },
              {
                offsetX: -100,
                offsetY: -200,
                text: TOOLTIP_TEXT_BRANCHES.MODEL_COORDINATION,
                width: "200px"
              }
            ],
            leafMaterial: materials.overwateredLeaf,
            tooltipText: TOOLTIP_TEXT_BASE.TREE_2,
            buttonData: {
              label: 'Growing',
              verticalOffset: -120
            },
            skyAnimation: skyAnimations.day
          }, {
            ...baseTooltipOffset,
            data: TREES_NUMBER_VALUES[3],
            baseTooltipHeight: "120px",
            branches: [],
            leafMaterial: materials.dryLeaf,
            tooltipText: TOOLTIP_TEXT_BASE.TREE_3,
            buttonData: {
              label: 'Overwatered',
              verticalOffset: -170
            },
            skyAnimation: skyAnimations.night
          }, {
            ...baseTooltipOffset,
            data: TREES_NUMBER_VALUES[4],
            branches: [],
            leafMaterial: materials.recoveredLeaf,
            tooltipText: TOOLTIP_TEXT_BASE.TREE_4,
            buttonData: {
              label: 'Recovered',
              verticalOffset: -220
            },
            skyAnimation: skyAnimations.day
          }, {
            ...baseTooltipOffset,
            data: TREES_NUMBER_VALUES[5],
            branches: [],
            leafMaterial: materials.cherryBlossom,
            tooltipText: TOOLTIP_TEXT_BASE.TREE_5,
            buttonData: {
              label: 'Cherry Blossom',
              verticalOffset: -270
            }
          }];

          const onClickButton = function (treeIndex) {
            trees.forEach(function(tree, index) {
              if (index === treeIndex) {
                tree.setEnabled(true);
                treesData[treeIndex].baseTooltip.isVisible = true;
                treesData[treeIndex].branches.forEach(branch => {
                  branch.tooltip.isVisible = true;
                });
                treesData[treeIndex].button.color = theme.background;
                treesData[treeIndex].button.background = theme.color;

                setTimeout(function() {
                  scene.beginAnimation(treesData[treeIndex].baseTooltip, 0, 60, false);
                }, TOOLTIP_TIMEOUT);
              } else {
                tree.setEnabled(false);
                treesData[index].baseTooltip.isVisible = false;
                treesData[index].branches.forEach(branch => {
                  branch.tooltip.isVisible = false;
                });

                treesData[index].baseTooltip.scaleX = 0;
                treesData[index].baseTooltip.scaleY = 0;
                treesData[index].button.color = theme.color;
                treesData[index].button.background = theme.background;
              }
            });

            scene.stopAnimation(skybox);
            scene.beginDirectAnimation(skybox, [treesData[treeIndex].skyAnimation], 0, 100, false, 1);
          }

          const generateTrees = function(treesData) {
            return treesData.map(function(tree, index) {
              const generatedTree = createTree(
                tree.data.trunkHeight,
                tree.data.trunkTaper,
                tree.data.trunkSlices,
                materials.defaultBark,
                tree.data.boughs,
                tree.data.forks,
                tree.data.forkAngle,
                tree.data.forkRatio,
                tree.data.branches,
                tree.data.branchAngle,
                tree.data.bowFreq,
                tree.data.bowHeight,
                tree.data.leavesOnBranch,
                tree.data.leafWHRatio,
                tree.leafMaterial,
                scene
              );
              generatedTree.position.x = 0
              generatedTree.position.y = 0
              generatedTree.position.z = 0
              generatedTree.setEnabled(false);

              tree.baseTooltip = createBaseTooltip(
                generatedTree,
                scene,
                tree.baseTooltipOffsetX,
                tree.baseTooltipOffsetY,
                tree.tooltipText,
                tree.baseTooltipHeight
              );

              tree.branches.forEach(branch => {
                const branchTooltip = createAttachedTooltip(generatedTree, scene, branch.offsetX, branch.offsetY, branch.text, branch.width);
                branch.tooltip = branchTooltip;
                branch.tooltip.isVisible = false;
              });

              const button = createButton(index, tree.buttonData.label, tree.buttonData.verticalOffset, onClickButton);
              tree.button = button;

              if (index === 0) {
                tree.baseTooltip.isVisible = true;
                setTimeout(function() {
                  scene.beginAnimation(tree.baseTooltip, 0, FRAME_RATE * 2, false);
                }, TOOLTIP_TIMEOUT);
                tree.button.color = theme.background;
                tree.button.background = theme.color;
              } else {
                tree.baseTooltip.isVisible = false;
              }

              return generatedTree;
            });
          }

          trees = generateTrees(treesData);

          trees[0].setEnabled(true);

          camera.setTarget(trees[0]);

          return scene;
        };

        const canvas = document.getElementById("renderCanvas"); // Get the canvas element
        const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine
        // Add your code here matching the playground format
        const scene = createScene(); //Call the createScene function
        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
                scene.render();
        });
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
                engine.resize();
        });
      </script>
  </body>
</html>
