<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Babylon Template</title>
    <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src="https://cdn.babylonjs.com/materialsLibrary/babylon.skyMaterial.min.js"></script>
    <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>
    <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
    <script src="javascripts/setCamera.js"></script>
    <script src="javascripts/createTree.js"></script>
    <script src="javascripts/createSkybox.js"></script>
    <script src="javascripts/setGround.js"></script>
    <script src="javascripts/createButton.js"></script>
    <script src="javascripts/createTooltip.js"></script>
    <script src="javascripts/createAttachedTooltip.js"></script>
  </head>

  <body>
      <canvas id="renderCanvas" touch-action="none"></canvas>
      <script>
        var createScene = function() {
          // TODO: Start here for initialization

          // Initialize Scene
          const scene = new BABYLON.Scene(engine);

          const camera = setCamera();

          // Lighting
          const light = new BABYLON.HemisphericLight(
            "light",
            new BABYLON.Vector3(0, 1, 0)
          );
          light.intensity = 1;

          scene.debugLayer.show();

          setGround();

          setSky();

          console.log('scene', scene);

          //trunk and branch material
          var bark = new BABYLON.StandardMaterial("bark", scene);
          bark.emissiveTexture = new BABYLON.Texture("https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Bark_texture_wood.jpg/800px-Bark_texture_wood.jpg", scene);
          bark.diffuseTexture = new BABYLON.Texture("https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Bark_texture_wood.jpg/800px-Bark_texture_wood.jpg", scene);
          bark.bumpTexture = new BABYLON.Texture("assets/tree-bark-bump-texture.jpeg", scene);
          bark.diffuseTexture.uScale = 2.0;//Repeat 5 times on the Vertical Axes
          bark.diffuseTexture.vScale = 2.0;//Repeat 5 times on the Horizontal Axes

          // stage 1
          var trunkHeight = 5;
          var trunkTaper = 0.6;
          var trunkSlices = 10;
          var boughs = 1; // 1 or 2
          var forks = 1;
          var forkAngle = 0;
          var forkRatio = 1;
          var branchAngle = 1;
          var bowFreq = 1;
          var bowHeight = 1;
          var branches = 2;
          var leavesOnBranch = 2;
          var leafWHRatio = 0.5;
          //leaf material
          var leafMaterial = new BABYLON.StandardMaterial(
            "leafMaterial",
            scene
          );
          leafMaterial.diffuseColor = BABYLON.Color3.FromHexString("#ACCD3E")
          const tree0 = createTree(
            trunkHeight,
            trunkTaper,
            trunkSlices,
            bark,
            boughs,
            forks,
            forkAngle,
            forkRatio,
            branches,
            branchAngle,
            bowFreq,
            bowHeight,
            leavesOnBranch,
            leafWHRatio,
            leafMaterial,
            scene
          );
          tree0.position.x = 0
          tree0.position.y = 0

          // stage 2
          var trunkHeight = 10;
          var trunkTaper = 0.6;
          var trunkSlices = 5;
          var boughs = 2; // 1 or 2
          var forks = 3;
          var forkAngle = Math.PI/4;
          var forkRatio = 2/(1+Math.sqrt(5)); //PHI the golden ratio
          var branchAngle = Math.PI/3;
          var bowFreq = 1;
          var bowHeight = 1;
          var branches = 4;
          var leavesOnBranch = 5;
          var leafWHRatio = 0.5;
          //leaf material
          var leafMaterial = new BABYLON.StandardMaterial(
            "leafMaterial",
            scene
          );
          leafMaterial.diffuseColor = BABYLON.Color3.FromHexString("#ACCD3E")
          const tree1 = createTree(
            trunkHeight,
            trunkTaper,
            trunkSlices,
            bark,
            boughs,
            forks,
            forkAngle,
            forkRatio,
            branches,
            branchAngle,
            bowFreq,
            bowHeight,
            leavesOnBranch,
            leafWHRatio,
            leafMaterial,
            scene
          );
          tree1.position.x = 0
          tree1.position.y = 0
          tree1.setEnabled(false);


          // stage 3
          var trunkHeight = 15;
          var trunkTaper = 0.6;
          var trunkSlices = 5;
          var boughs = 2; // 1 or 2
          var forks = 4;
          var forkAngle = Math.PI/4;
          var forkRatio = 2/(1+Math.sqrt(5)); //PHI the golden ratio
          var branchAngle = Math.PI/3;
          var bowFreq = 2;
          var bowHeight = 3.5;
          var branches = 10;
          var leavesOnBranch = 5;
          var leafWHRatio = 0.5;
          //leaf material
          var leafMaterial = new BABYLON.StandardMaterial(
            "leafMaterial",
            scene
          );
          leafMaterial.diffuseColor = BABYLON.Color3.FromHexString("#618D23")
          const tree2 = createTree(
            trunkHeight,
            trunkTaper,
            trunkSlices,
            bark,
            boughs,
            forks,
            forkAngle,
            forkRatio,
            branches,
            branchAngle,
            bowFreq,
            bowHeight,
            leavesOnBranch,
            leafWHRatio,
            leafMaterial,
            scene
          );
          tree2.position.x = 0
          tree2.position.y = 0
          tree2.setEnabled(false);

          // stage 4
          var trunkHeight = 20;
          var trunkTaper = 0.6;
          var trunkSlices = 5;
          var boughs = 2; // 1 or 2
          var forks = 4;
          var forkAngle = Math.PI/4;
          var forkRatio = 2/(1+Math.sqrt(5)); //PHI the golden ratio
          var branchAngle = Math.PI/3;
          var bowFreq = 2;
          var bowHeight = 3.5;
          var branches = 10;
          var leavesOnBranch = 5;
          var leafWHRatio = 0.5;
          //leaf material
          var leafMaterial = new BABYLON.StandardMaterial(
            "leafMaterial",
            scene
          );
          leafMaterial.diffuseColor = BABYLON.Color3.FromHexString("#B69063")
          const tree3 = createTree(
            trunkHeight,
            trunkTaper,
            trunkSlices,
            bark,
            boughs,
            forks,
            forkAngle,
            forkRatio,
            branches,
            branchAngle,
            bowFreq,
            bowHeight,
            leavesOnBranch,
            leafWHRatio,
            leafMaterial,
            scene
          );
          tree3.position.x = 0
          tree3.position.y = 0
          tree3.position.z = 0
          tree3.setEnabled(false);

          // stage 5
          var trunkHeight = 20;
          var trunkTaper = 0.6;
          var trunkSlices = 5;
          var boughs = 2; // 1 or 2
          var forks = 6;
          var forkAngle = Math.PI/4;
          var forkRatio = 2/(1+Math.sqrt(5)); //PHI the golden ratio
          var branchAngle = Math.PI/3;
          var bowFreq = 2;
          var bowHeight = 3.5;
          var branches = 10;
          var leavesOnBranch = 10;
          var leafWHRatio = 0.5;
          //leaf material
          var leafMaterial = new BABYLON.StandardMaterial(
            "leafMaterial",
            scene
          );
          leafMaterial.diffuseColor = BABYLON.Color3.FromHexString("#D5DB7D")
          // leafMaterial.diffuseColor = BABYLON.Color3.FromHexString("#A6B264")
          const tree4 = createTree(
            trunkHeight,
            trunkTaper,
            trunkSlices,
            bark,
            boughs,
            forks,
            forkAngle,
            forkRatio,
            branches,
            branchAngle,
            bowFreq,
            bowHeight,
            leavesOnBranch,
            leafWHRatio,
            leafMaterial,
            scene
          );
          tree4.position.x = 0;
          tree4.position.y = 0;
          tree4.position.z = 0;
          tree4.setEnabled(false);

          // stage 6
          var trunkHeight = 20;
          var trunkTaper = 0.6;
          var trunkSlices = 5;
          var boughs = 2; // 1 or 2
          var forks = 6;
          var forkAngle = Math.PI/4;
          var forkRatio = 2/(1+Math.sqrt(5)); //PHI the golden ratio
          var branchAngle = Math.PI/3;
          var bowFreq = 2;
          var bowHeight = 3.5;
          var branches = 10;
          var leavesOnBranch = 10;
          var leafWHRatio = 0.5;
          //leaf material
          var leafMaterial = new BABYLON.StandardMaterial(
            "leafMaterial",
            scene
          );

          leafMaterial.diffuseColor = BABYLON.Color3.FromHexString("#E84396")
          leafMaterial.specularColor = BABYLON.Color3.FromHexString("#E84396")
          leafMaterial.emissiveColor = BABYLON.Color3.FromHexString("#FF9DCE")
          leafMaterial.ambientColor = BABYLON.Color3.FromHexString("#FF9DCE")

          const tree5 = createTree(
            trunkHeight,
            trunkTaper,
            trunkSlices,
            bark,
            boughs,
            forks,
            forkAngle,
            forkRatio,
            branches,
            branchAngle,
            bowFreq,
            bowHeight,
            leavesOnBranch,
            leafWHRatio,
            leafMaterial,
            scene
          );
          tree5.position.x = 0;
          tree5.position.y = 0;
          tree5.position.z = 0;
          tree5.setEnabled(false);

          camera.setTarget(tree1);

          const treeOffsetX = "175px";
          const treeOffsetY = "-100px";

          // tooltips
          var tree0Text = "This is the first tree";
          var tree1Text = "This is the second tree";
          var tree2Text = "This is the third tree";
          var tree3Text = "This is the fourth tree";
          var tree4Text = "This is the fifth tree";
          var tree5Text = "This is the sixth tree";

          createTooltip(tree0, scene, treeOffsetX, treeOffsetY, tree0Text);
          createTooltip(tree1, scene, treeOffsetX, treeOffsetY, tree1Text);
          createTooltip(tree2, scene, treeOffsetX, treeOffsetY, tree2Text);
          createTooltip(tree3, scene, treeOffsetX, treeOffsetY, tree3Text);
          createTooltip(tree4, scene, treeOffsetX, treeOffsetY, tree4Text);
          createTooltip(tree5, scene, treeOffsetX, treeOffsetY, tree5Text);


          // another option for tooltip
          // createAttachedTooltip(tree0, scene, tree0Text);
          // createAttachedTooltip(tree1, scene, tree1Text);
          // createAttachedTooltip(tree2, scene, tree2Text);
          // createAttachedTooltip(tree3, scene, tree3Text);
          // createAttachedTooltip(tree4, scene, tree4Text);

          // sample buttons
          createButton(tree0, 'Bud', 0, [tree1, tree2, tree3, tree4, tree5]);
          createButton(tree1, 'Young Tree', -50, [tree0, tree2, tree3, tree4, tree5]);
          createButton(tree2, 'Growing Tree', -100, [tree0, tree1, tree3, tree4, tree5]);
          createButton(tree3, 'Overwatered Tree', -150, [tree0, tree1, tree2, tree4, tree5]);
          createButton(tree4, 'Recovered Tree', -200, [tree0, tree1, tree2, tree3, tree5]);
          createButton(tree5, 'Apple Blossom Tree', -250, [tree0, tree1, tree2, tree3, tree4]);

          return scene;
        };

        const canvas = document.getElementById("renderCanvas"); // Get the canvas element
        const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine
        // Add your code here matching the playground format
        const scene = createScene(); //Call the createScene function
        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
                scene.render();
        });
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
                engine.resize();
        });
      </script>
  </body>
</html>
