<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Babylon Template</title>
    <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src="https://cdn.babylonjs.com/materialsLibrary/babylon.skyMaterial.min.js"></script>
    <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>
    <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
    <script src="javascripts/setCamera.js"></script>
    <script src="javascripts/createTree.js"></script>
    <script src="javascripts/setSkyAnimation.js"></script>
    <script src="javascripts/setGround.js"></script>
    <script src="javascripts/createButton.js"></script>
    <script src="javascripts/createTooltip.js"></script>
    <script src="javascripts/createAttachedTooltip.js"></script>
    <script src="consts.js"></script>

  </head>

  <body>
      <canvas id="renderCanvas" touch-action="none"></canvas>
      <script>
        var createScene = function() {
          // Initialize Scene
          const scene = new BABYLON.Scene(engine);

          const camera = setCamera();

          // Lighting
          const light = new BABYLON.HemisphericLight(
            "light",
            new BABYLON.Vector3(0, 1, 0)
          );

          // Create Materials

          //Skybox Materials
          const skyboxMaterials = {};

          const generateSkyMaterial = function (name,values) {
            skyboxMaterials[name] = new BABYLON.SkyMaterial("skyMaterial");
            skyboxMaterials[name].backFaceCulling = false;
            skyboxMaterials[name].turbidity = values.turbidity,
            skyboxMaterials[name].luminance = values.luminance,
            skyboxMaterials[name].rayleigh = values.rayleigh,
            skyboxMaterials[name].inclination = values.inclination,
            skyboxMaterials[name].mieCoefficient = values.mieCoefficient,
            skyboxMaterials[name].mieDirectionalG = values.mieDirectionalG
            skyboxMaterials[name].azimuth = values.azimuth
          }

          generateSkyMaterial('earlyMorning', SKY_MATERIALS_DATA.earlyMorning);
          generateSkyMaterial('morning', SKY_MATERIALS_DATA.morning);
          generateSkyMaterial('noon', SKY_MATERIALS_DATA.noon);
          generateSkyMaterial('earlyAfternoon', SKY_MATERIALS_DATA.earlyAfternoon);
          generateSkyMaterial('afternoon', SKY_MATERIALS_DATA.afternoon);
          generateSkyMaterial('sunset', SKY_MATERIALS_DATA.sunset);

          skyboxMaterials.cloudy = new BABYLON.StandardMaterial("skyBox", scene);
          skyboxMaterials.cloudy.backFaceCulling = false;
          skyboxMaterials.cloudy.reflectionTexture = new BABYLON.CubeTexture("assets/cloudy", scene);
          skyboxMaterials.cloudy.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
          skyboxMaterials.cloudy.diffuseColor = new BABYLON.Color3(0, 0, 0);
          skyboxMaterials.cloudy.specularColor = new BABYLON.Color3(0, 0, 0);

          const materials = {};

          materials.defaultBark = new BABYLON.StandardMaterial("defaultBark", scene);
          materials.defaultBark.emissiveTexture = new BABYLON.Texture("https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Bark_texture_wood.jpg/800px-Bark_texture_wood.jpg", scene);
          materials.defaultBark.diffuseTexture = new BABYLON.Texture("https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Bark_texture_wood.jpg/800px-Bark_texture_wood.jpg", scene);
          materials.defaultBark.bumpTexture = new BABYLON.Texture("assets/tree-bark-bump-texture.jpeg", scene);
          materials.defaultBark.diffuseTexture.uScale = 2.0;//Repeat 5 times on the Vertical Axes
          materials.defaultBark.diffuseTexture.vScale = 2.0;//Repeat 5 times on the Horizontal Axes

          const bark = materials.defaultBark;

          materials.defaultLeaf = new BABYLON.StandardMaterial(
              "defaultLeafMaterial",
              scene
            );
          materials.defaultLeaf.diffuseColor = BABYLON.Color3.FromHexString("#ACCD3E");

          materials.overwateredLeaf = new BABYLON.StandardMaterial(
              "overwateredLeafMaterial",
              scene
          );
          materials.overwateredLeaf.diffuseColor = BABYLON.Color3.FromHexString("#618D23")

          materials.dryLeaf = new BABYLON.StandardMaterial(
              "dryLeafMaterial",
              scene
          );
          
          materials.dryLeaf.diffuseColor = BABYLON.Color3.FromHexString("#B69063")

          materials.cherryBlossom = new BABYLON.StandardMaterial(
              "cherryBlossomMaterial",
              scene
          );
          
          materials.cherryBlossom.diffuseColor = BABYLON.Color3.FromHexString("#E84396");
          materials.cherryBlossom.specularColor = BABYLON.Color3.FromHexString("#E84396");
          materials.cherryBlossom.emissiveColor = BABYLON.Color3.FromHexString("#FF9DCE");
          materials.cherryBlossom.ambientColor = BABYLON.Color3.FromHexString("#FF9DCE");


          setGround();
          
          //const skyAnimations = {
          //  day: setSkyAnimation("Day", "material.inclination", skyboxMaterial.inclination, 0),
          //  night: setSkyAnimation("Night", "material.inclination", skyboxMaterial.inclination, -0.5)
          //};

          
          //Set trees data
          let trees = [];

          const treesData = [{
            data: TREES_NUMBER_VALUES[0],
            leafMaterial: materials.defaultLeaf,
            tooltipText: "This is the first tree",
            buttonData: {
              label: 'Bud',
              verticalOffset: 0
            },
            skyMaterial: skyboxMaterials.earlyMorning
          }, {
            data: TREES_NUMBER_VALUES[1],
            leafMaterial: materials.defaultLeaf,
            tooltipText: "This is the second tree",
            buttonData: {
              label: 'Young Tree',
              verticalOffset: -50
            },
            skyMaterial: skyboxMaterials.morning
          }, {
            data: TREES_NUMBER_VALUES[2],
            leafMaterial: materials.overwateredLeaf,
            tooltipText: "This is the third tree",
            buttonData: {
              label: 'Growing Tree',
              verticalOffset: -100
            },
            skyMaterial: skyboxMaterials.noon
          }, {
            data: TREES_NUMBER_VALUES[3],
            leafMaterial: materials.dryLeaf,
            tooltipText: "This is the fourth tree",
            buttonData: {
              label: 'Overwatered Tree',
              verticalOffset: -150
            },
            skyMaterial: skyboxMaterials.cloudy,
          }, {
            data: TREES_NUMBER_VALUES[4],
            leafMaterial: materials.cherryBlossom,
            tooltipText: "This is the fifth tree",
            buttonData: {
              label: 'Recovered Tree',
              verticalOffset: -200
            },
            skyMaterial: skyboxMaterials.afternoon
          }, {
            data: TREES_NUMBER_VALUES[5],
            leafMaterial: materials.cherryBlossom,
            tooltipText: "This is the sixth tree",
            buttonData: {
              label: 'Apple Blossom Tree',
              verticalOffset: -250
            },
            skyMaterial: skyboxMaterials.sunset

          }];

          //Create skybox
          const skybox = BABYLON.MeshBuilder.CreateBox("skyBox", {size:1000.0}, scene);
          skybox.material = skyboxMaterials.earlyMorning;

          const onClickButton = function(treeIndex) {
            trees.forEach(function(tree, index) {
              if (index === treeIndex) {
                tree.setEnabled(true);
              } else {
                tree.setEnabled(false);
              }
            });

            //scene.stopAnimation(skybox);
            //scene.beginDirectAnimation(skybox, [treesData[treeIndex].skyAnimation], 0, 100, false, 1);

            skybox.material = treesData[treeIndex].skyMaterial;
          }

           
          const generateTrees = function(treesData) {
            return treesData.map(function(tree, index) {
              const generatedTree = createTree(
                tree.data.trunkHeight,
                tree.data.trunkTaper,
                tree.data.trunkSlices,
                materials.defaultBark,
                tree.data.boughs,
                tree.data.forks,
                tree.data.forkAngle,
                tree.data.forkRatio,
                tree.data.branches,
                tree.data.branchAngle,
                tree.data.bowFreq,
                tree.data.bowHeight,
                tree.data.leavesOnBranch,
                tree.data.leafWHRatio,
                tree.leafMaterial,
                scene
              );
              generatedTree.position.x = 0
              generatedTree.position.y = 0
              generatedTree.position.z = 0
              generatedTree.setEnabled(false);

              const treeOffsetX = "175px";
              const treeOffsetY = "-100px";

              createTooltip(generatedTree, scene, treeOffsetX, treeOffsetY, tree.tooltipText);

              createButton(index, tree.buttonData.label, tree.buttonData.verticalOffset, onClickButton);

              return generatedTree;
            });
          }

          trees = generateTrees(treesData);

          trees[0].setEnabled(true);
          
          camera.setTarget(trees[0]);

          return scene;
        };

        const canvas = document.getElementById("renderCanvas"); // Get the canvas element
        const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine
        // Add your code here matching the playground format
        const scene = createScene(); //Call the createScene function
        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
                scene.render();
        });
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
                engine.resize();
        });
      </script>
  </body>
</html>
